/*--------------------------------------
  XY axis helpers
--------------------------------------*/
-xy(prop1, prop2, args)
  {prop1} args[0]
  if args[1]
    {prop2} args[1]
  else 
    {prop2} args[0]

margin-x()
  -xy(margin-right, margin-left, arguments)

margin-y()
  -xy(margin-top, margin-bottom, arguments)

padding-x()
  -xy(padding-right, padding-left, arguments)

padding-y()
  -xy(padding-top, padding-bottom, arguments)
  
/* works fine with border() mixin */
border-x()
  if arguments == none
    -xy(border-right, border-left, arguments)

border-y()
  if arguments == none
   -xy(border-top, border-bottom, arguments)


/*--------------------------------------
  Size mixin
--------------------------------------*/
size()
  if length(arguments) == 1
    width: arguments[0]
    height: arguments[0]
  else
    width: arguments[0]
    height: arguments[1]


/*--------------------------------------
  Position mixin
--------------------------------------*/
-pos(type, args)
  i = 0
  position: unquote(type)
  for j in (1..4)
    if length(args) > i
      {args[i]}: args[i + 1] is a 'unit' ? args[i += 1] : 0
    i += 1


fixed()
  -pos('fixed', arguments)

absolute()
  -pos('absolute', arguments)

relative()
  -pos('relative', arguments)


/*--------------------------------------
  Multi-lines ellipsis mixin (only in webkit)
--------------------------------------*/
ellipsis()
  display block
  overflow hidden
  text-overflow ellipsis
  white-space nowrap

  if arguments
    white-space normal
    display -webkit-box
    -webkit-box-orient vertical  
    -webkit-line-clamp arguments[0]


/*--------------------------------------
  Shortcuts for pseudo-elements
--------------------------------------*/
pb()
  content: '';
  display: block;
  absolute: arguments

  if arguments[0] == static
    position static


pi($align = auto)
  content: '';
  display: inline-block;
  vertical-align $align


/*--------------------------------------
  Quick image insert
--------------------------------------*/
img($name, $position = '50% 50%')
  background-image data($img-path + $name)
  background-position unquote($position)


/*--------------------------------------
  Color helpers
--------------------------------------*/

placeholder($color){
  &::-webkit-input-placeholder {color: $color}
  &:-moz-placeholder           {color: $color}
  &::-moz-placeholder          {color: $color}
  &:-ms-input-placeholder      {color: $color}
}


brand($size, $color = $brand-c)
  font $size $brand-f
  color: $color

title($size, $color = $title-c)
  font $size $title-f
  color: $color

/*--------------------------------------
    Layout helpers
--------------------------------------*/
hLine($align = baseline, $gutter = auto)
  &>*
    display: inline-block
    vertical-align: $align

  if $gutter != auto
    margin-left: -($gutter)
    &>*
      margin-left: $gutter

  if $align == none
    &>*
      display: block
      vertical-align: auto
      display initial
      vertical-align: initial



vLine()
  &>*
    margin-bottom: arguments
    &:last-child
      margin-bottom: 0


jLine()
  clearfix()
  &>*:last-child
    float: right
  &>*:first-child
    float: left



vAlign($type = middle, $full = true)
  hLine $type
  &:after
    pi $type
    size: 0 100%
  //prevent bugs on small screens
  white-space nowrap
  &>*
    white-space normal
    if $full == true
      width: 100%


ctr()
  position absolute

  if arguments[0] == y
    top: 50%
    transform translateY(-50%)

  else if arguments[0] == x
    left: 50%
    transform translateX(-50%)

  else
    top: 50%
    left 50%
    transform translate(-50%, -50%)

p-ctr()
  content ''
  display block
  ctr(arguments)



ctr-at($w = auto, $h = $w)
  size $w $h
  .flexbox &
    fLine center center

  .no-flexbox &
    text-align center
    if arguments
      line-height arguments




container($width = $base-max-w)
  max-width: $width
  min-width $base-min-w
  margin-x auto
  padding-x 10px




/*--------------------------------------
    Responsive helpers
--------------------------------------*/
b()
  if arguments[1]
    condition = s('only screen and (%s) and (%s)', unquote(arguments[0]), unquote(arguments[1]) )
  else
    condition = s('only screen and (%s)', unquote(arguments[0]) )

  @media condition
    {block}

w-max()
  condition = 'only screen and (max-width: %s)' % arguments[0]
  @media condition
    {block}

w-min()
  condition = 'only screen and (min-width: %s)' % arguments[0]
  @media condition
    {block}

h-max()
  condition = 'only screen and (max-height: %s)' % arguments[0]
  @media condition
    {block}

h-min()
  condition = 'only screen and (min-height: %s)' % arguments[0]
  @media condition
    {block}


/*
  Bootstrap inspired breakpoint ranges

  lg - extra large  (from 1200px and higher)
  md  - large       (from 960px to 1200px)
  ms  - middle      (from 768px to 960px)
  xs  - small       (from 480px to 768px)
  xxs - very small  (from 320px to 480px)
*/

lg()
  +w-min($lg)
    {block}

md()
  +b('min-width:'+$md 'max-width:'+$lg)
    {block}

sm()
  +b('min-width:'+$sm 'max-width:'+$md)
    {block}

xs()
  +b('min-width:'+$xs 'max-width:'+$sm)
    {block}

xxs()
  +b('min-width:'+$xxs 'max-width:'+$xs)
    {block}



fluid-width($static-w, $parent-w = $base-max-w)
  width: $static-w / $parent-w * 100%

fluid-prop($prop-name, $static-w, $parent-w)
  {$prop-name}: $static-w / $parent-w * 100%




/*--------------------------------------
  MISC  
--------------------------------------*/

border(color, args...)
  if color is a 'color'
    border: 1px solid color args
  else
    border: arguments


replace-text(image, x=50%, y=50%)
  hide-text()
  background-image image
  background-repeat no-repeat
  background-position x y


test($color = red)
  border $color !important


trans()
  if arguments[0] == true
    transition-property arguments[0]

  if arguments[1] == true
    transition-duration arguments[1]
  else
    transition-duration $transition-duration


pressable($deep = 1px)
  position relative
  &:active
    top $deep


hide-text()
  font: 0/0 serif
  text-shadow: none
  color: transparent
  if arguments[0] == none
    font:  $base-f-size/$base-f-height $base-f
    color: inherit


hide()
  display none !important

show()
  display block !important

show-as()
  display arguments !important
